{"componentChunkName":"component---src-templates-blog-post-js","path":"/test/","result":{"data":{"site":{"siteMetadata":{"title":"Crithinking"}},"markdownRemark":{"id":"3c956895-3417-5041-b3eb-b90c052a75e5","excerpt":"JavaSE Language Basics The rules and conventions of naming the name are case-sensitive and not be a keyword or reserved word. white space is not permitted. When…","html":"<h2>JavaSE</h2>\n<h2>Language Basics</h2>\n<ul>\n<li>\n<p>The rules and conventions of naming</p>\n<ul>\n<li>the name are <strong>case-sensitive</strong> and <strong>not be a keyword or reserved word</strong>. <strong>white space is not permitted.</strong> When choosing a name for your variables, <strong>use full words</strong> instead of cryptic abbreviation</li>\n<li>a variable's name can be any legal identifier — an <strong>unlimited-length sequence of Unicode letters and digits</strong>, <em>beginning with a letter, the dollar sign \"$\", or the underscore character \"_\".Subsequent characters may be letters, <strong>digits</strong>, dollar signs, or underscore characters.</em> By convention, the underscore character and dollar sign is never used at all.</li>\n<li><strong>constant value:</strong> capitalizing every letter and separating subsequent words with the underscore character. By convention, the underscore character is never used elsewhere.</li>\n<li><strong>fields and methods:</strong> If the name you choose consists of only one word, spell that word in all lowercase letters. If it consists of more than one word, capitalize the first letter of each subsequent word.</li>\n<li><strong>class：</strong> capitalize the first letter of each word.</li>\n</ul>\n</li>\n<li>\n<p>DataType</p>\n<ul>\n<li>boolean:\n<ul>\n<li>only two possible values: true and false</li>\n<li>its \"size\" isn't precisely defined</li>\n<li>Default Value (for fields):false</li>\n</ul>\n</li>\n<li>int:\n<ul>\n<li>a 32-bit signed two's complement integer</li>\n<li>[-2^31, 2^32 - 1]</li>\n<li>Default Value (for fields):0</li>\n</ul>\n</li>\n<li>float:\n<ul>\n<li>a single-precision 32-bit IEEE 754 floating point.</li>\n<li>This data type should never be used for precise values, such as currency.</li>\n<li>Default Value (for fields):0.0f</li>\n</ul>\n</li>\n<li>double:\n<ul>\n<li>a double-precision 64-bit IEEE 754 floating point.</li>\n<li>This data type should never be used for precise values, such as currency.</li>\n<li>Default Value (for fields):0.0d</li>\n</ul>\n</li>\n<li>char:\n<ul>\n<li>a single 16-bit Unicode character</li>\n<li>'\\u0000' -> '\\uffff'</li>\n<li>Default Value (for fields):'\\u0000'</li>\n</ul>\n</li>\n<li>byte:\n<ul>\n<li>a 8-bit signed two's complement integer</li>\n<li>[-128, 127]</li>\n<li>Default Value (for fields):0</li>\n</ul>\n</li>\n<li>short:\n<ul>\n<li>a 16-bit signed two's complement integer</li>\n<li>[-32,768, 32767]</li>\n<li>Default Value (for fields):0</li>\n</ul>\n</li>\n<li>long:\n<ul>\n<li>a 64-bit two's complement integer</li>\n<li>[-2^63, 2^63 - 1]</li>\n<li>Default Value (for fields):0L</li>\n</ul>\n</li>\n<li>others:\n<ul>\n<li>An integer literal is of type long if it ends with the letter L or l; otherwise it is of type int. Values of the integral types byte, short, int, and long can be created from int literals. Values of type long that exceed the range of int can be created from long literals(sample:534L).</li>\n<li>A floating-point literal is of type float if it ends with the letter F or f; otherwise its type is double and it can optionally end with the letter D or d.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Operators, Expressions, Statements, Blocks</p>\n</li>\n<li>\n<p>Control Flow Statements</p>\n<ul>\n<li>Branching Statements\n<ul>\n<li>if-else</li>\n<li>switch</li>\n<li>some keywords:continue, break, return</li>\n</ul>\n</li>\n<li>Looping Statemens\n<ul>\n<li>\n<p>for</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">// a form of for looping</span>\r\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// anther for Looping form</span>\r\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>while</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// a sample of whlie looping</span>\r\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  i<span class=\"token operator\">--</span>；\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Classes and Objects</p>\n<ul>\n<li>\n<p>declare a class</p>\n<ul>\n<li>fields</li>\n<li>constructors</li>\n<li>methods</li>\n</ul>\n</li>\n<li>\n<p>creating and using objects</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">{</span>\r\n      <span class=\"token comment\">// fields: Attributes of a instance object</span>\r\n\r\n      <span class=\"token comment\">// constructors:Accepts arguments to initialize an instance object</span>\r\n\r\n      <span class=\"token comment\">// methods:Perform operations on instance objects</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// creat and initialize a object</span>\r\n<span class=\"token class-name\">ClassName</span> objectName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">(</span><span class=\"token comment\">// constructor arguments)</span>\r\n\r\n<span class=\"token comment\">// use this object</span>\r\nobjectname<span class=\"token punctuation\">.</span><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token comment\">// arguments);</span>\r\n\r\n<span class=\"token comment\">// use method signature(the number of parameter, the type of parameter) to overridding a method, the compiler cannot distinguish between methods based solely on their return type.</span></code></pre></div>\n</li>\n<li>\n<p>packages</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Interfaces and Inheritance</p>\n</li>\n<li>\n<p>Array, Enum, Numbers and Strings</p>\n</li>\n<li>\n<p>Exceptions and I/O</p>\n</li>\n<li>\n<p>Collections and Generics</p>\n</li>\n<li>\n<p>Annotations and Reflections</p>\n</li>\n<li>\n<p>Nested Classes</p>\n</li>\n<li>\n<p>Regular Expressions</p>\n</li>\n<li>\n<p>Lamda Expressions</p>\n</li>\n<li>\n<p>Concurrency</p>\n</li>\n<li>\n<p>Date-Time APIs</p>\n</li>\n<li>\n<p>Others</p>\n<ul>\n<li>MySQL, JDBC</li>\n<li>Servlet, Spring, SpringMVC, Mybatis, SpringBoot</li>\n<li>Linux, Git, Github, Maven, Gradle</li>\n<li>redis, MessageQueue, microservices, JVM, JUC</li>\n<li>Leetcode</li>\n<li>Python</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"JavaSE","date":"December 20, 2024","description":"This is a Javase notes."}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":{"fields":{"slug":"/论人类不平等的起源和基础/text/"},"frontmatter":{"title":"论人类不平等的起源和基础"}}},"pageContext":{"id":"3c956895-3417-5041-b3eb-b90c052a75e5","previousPostId":"faa1fe6b-a40c-5e8d-8920-efbe59cda5a7","nextPostId":"fd704f3a-baa0-5b7f-9696-45ceb31e7a88"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}