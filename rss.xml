<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[A starter blog demonstrating what Gatsby can do.]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 11 Jan 2025 11:33:00 GMT</lastBuildDate><item><title><![CDATA[人生南北多歧路]]></title><description><![CDATA[…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/re-think friend relationship/re-think friend relationship/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/re-think friend relationship/re-think friend relationship/</guid><pubDate>Tue, 07 Jan 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;​	回忆了一些从中学时代开始的生活经历，联系到最近的一些材料，想到了一些东西，具体的分析材料不可以展示，但基本的观点如下：&lt;/p&gt;
&lt;p&gt;一，朋友关系作为人的社会关系的一种，是阶段性的，不是生来就有的。它也有一个发生、发展，最后逐渐走向消亡过程。这是事物的新陈代谢。更具体的说，是人的社会关系的新陈代谢。&lt;/p&gt;
&lt;p&gt;二，不同朋友承担的作用是不同的，有的适合交流生活，有的适合交流学习，有的适合交流观点，有的适合交流工作。虽然这些并不完全是互相独立的，但要尽可能保持互相独立。超过了一定的范围，则会导致思想上的混乱。&lt;/p&gt;
&lt;p&gt;三，朋友关系的发展和变化过程中要不断主动的去干预和调整，不能任由其发展，跟着感觉走，是最容易走错路的。但悲哀的是，人意识到这一点，往往是后知后觉的。&lt;/p&gt;
&lt;p&gt;​	在过去很长一段时间内，总是以一种消极的、被动的，无可奈何但只能接受的心态来适应这种社会关系的变化，这不能不说是受到了各种社会观念的影响。现在能够以更加积极主动的心态来看待这种变化，算是取得了一点微小的思想上的进步，值得欣喜。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[二零二五，元旦随笔]]></title><description><![CDATA[2024年，结束。今天是2025年的第一天，2025年是很值得一说的一年。
从现在往前数25年，新世纪刚刚到来，往后数25年，新中国成立已满100年。 到现在为止，总的感受是： 一. 前2…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/2025-new-year/2025-new-year/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/2025-new-year/2025-new-year/</guid><pubDate>Wed, 01 Jan 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;2024年，结束。今天是2025年的第一天，2025年是很值得一说的一年。
从现在往前数25年，新世纪刚刚到来，往后数25年，新中国成立已满100年。&lt;/p&gt;
&lt;p&gt;到现在为止，总的感受是：&lt;/p&gt;
&lt;p&gt;一. 前25年主要由家长和老师所共同管理，自己则处于被支配的地位，即使有选择的机会，大多时候也是跟着感觉走。感受并不深刻。&lt;/p&gt;
&lt;p&gt;二. 2025年，走到了这么一个特殊的阶段，即到了开始自己管理自己，自己支配自己的阶段，而且这种管理和支配是建立在已经稍微懂得一些东西的基础上的，而没有完全跟着感觉走或者完全跟着社会观念走。当然肯定会受到这些因素的影响，这一点是无需置疑的。&lt;/p&gt;
&lt;p&gt;三. 二十一世纪的第二个25年是值得期待的，虽然当前的情况并不乐观，至少从就业的形势来说是这样，但是，事物的发展总是会走向它的反面的，等再过几年，可能情况又大不一样了。&lt;/p&gt;
&lt;p&gt;与身边的朋友交流，常常总会听到怎么办或者如何是好的声音。我想，要得到一个正确的答案，那是不可能的。平静的生活就这样被迫增添了一丝紧张感，这恐怕也是生活的乐趣之一，是不能够拒绝的。&lt;/p&gt;
&lt;p&gt;最后，不妨设想一下，2050年会是什么样子呢？那时还会有智能手机和个人电脑吗？无人驾驶普及了吗？人们的生产生活方式有了大的变革吗？这些问题现在恐怕很难给出一个明确的回答。社会的发展往往以一种人们难以理解的方式进行着。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Some useful tools]]></title><description><![CDATA[VPN 这一块内容原本是有的,（此处省略原因），故删去。 GPT 连接好VPN之后，打开ChatGPT网址进行账号注册：https://chatgpt.com/ ，右上角点击注册按钮完成注册。 使用GPT需要google账号/Microsoft账号/Apple…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/Some useful tools/utools/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/Some useful tools/utools/</guid><pubDate>Sun, 29 Dec 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;VPN&lt;/h2&gt;
&lt;p&gt;这一块内容原本是有的,（此处省略原因），故删去。&lt;/p&gt;
&lt;h2&gt;GPT&lt;/h2&gt;
&lt;p&gt;连接好VPN之后，打开ChatGPT网址进行账号注册：&lt;a href=&quot;https://chatgpt.com/&quot;&gt;https://chatgpt.com/&lt;/a&gt; ，右上角点击注册按钮完成注册。&lt;/p&gt;
&lt;p&gt;使用GPT需要&lt;strong&gt;google账号/Microsoft账号/Apple&lt;/strong&gt;账号三个中至少有其中一个账号，其中Microsoft和Apple账号是在国内容易获得的，Google账号的注册比较麻烦。为了减少麻烦，我推荐用Microsoft账号或者Apple账号，有Windows电脑或iPad的用户肯定是有这两个账号的。注册登录完成后就可以使用了。&lt;/p&gt;
&lt;p&gt;多账号的好处是：GPT免费版每天是有询问次数限制的，具体多少次我也不知道。如果有多账户就可以使用不同账号进行询问。付费版分为Plus版20刀/月和Pro版200刀/月，没体验过，情况不明。&lt;/p&gt;
&lt;h2&gt;Zlibrary&lt;/h2&gt;
&lt;p&gt;这个网站是一个全球最大的&lt;strong&gt;免费获取电子书网站&lt;/strong&gt;，各种领域的电子书和教材PDF基本都有，需要访问外网，进行注册登录后才能使用，每人每天可以下载10本。&lt;/p&gt;
&lt;p&gt;官方的网址是：&lt;a href=&quot;https://z-library.sk/&quot;&gt;https://z-library.sk/&lt;/a&gt; 。如果需要看各种各样的电子版教材或者其他电子书都可以去这个网站检索试试。&lt;/p&gt;
&lt;p&gt;一般来说不会失效，如果失效则需要通过维基百科的Zlibrary词条进行访问，方法是：连接外网后浏览器检索Zlibray维基百科点进去，里面就能够找到网站了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：有很多钓鱼网站，钓鱼网站的特点是付费且资料少，直接检索大概率是钓鱼网站。&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[How to use Git]]></title><description><![CDATA[Git 是一款十分好用的分布式版本控制工具，作为一名开发者，无论你喜不喜欢它，你都不能离开它，也不能不学习它。 Git Git下载安装、环境配置网上教程非常详细，出门左转，请自学，本文档不再介绍。 需要指明的是，GitHub不等于Git。GitHub…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/How to use Git/Git/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/How to use Git/Git/</guid><pubDate>Sat, 28 Dec 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Git 是一款十分好用的分布式版本控制工具，作为一名开发者，无论你喜不喜欢它，你都不能离开它，也不能不学习它。&lt;/p&gt;
&lt;h2&gt;Git&lt;/h2&gt;
&lt;p&gt;Git下载安装、环境配置网上教程非常详细，出门左转，请自学，本文档不再介绍。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要指明的是，&lt;strong&gt;GitHub不等于Git&lt;/strong&gt;。GitHub是一个拥有很多仓库的在线网站，它的本体是一个Git服务器，这个Git服务器上存放着开发者们开发的各种项目。开发者们可以通过版本控制工具（如Git、SVN等）来使用GitHub上的各种项目。Git是一款分布式版本控制工具，我们可以使用Git来对项目进行管理，也可以通过它来使用GitHub上的各种项目。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;从零开始使用Git&lt;/h2&gt;
&lt;p&gt;Git下载、安装、环境配置完成后，本章节介绍GitHub的使用、Git管理文件。&lt;/p&gt;
&lt;h4&gt;GitHub的使用&lt;/h4&gt;
&lt;p&gt;GitHub有两种常用的使用场景，一是从GitHub上下载项目到本地（以便于自己学习该项目或者在该项目的基础上做二次开发），二是把本地项目上传到GitHub（如果你没有自己的Git服务器的话）。本节先介绍&lt;strong&gt;如何从GitHub上下载项目&lt;/strong&gt;，再介绍&lt;strong&gt;如何把本地项目上传到GitHub&lt;/strong&gt;。&lt;/p&gt;
&lt;h6&gt;&lt;strong&gt;如何从GitHub上下载项目&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;把一个项目从GitHub上下载到本地，采用以下的步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先在本地计算机上创建一个目录文件用来保存从GitHub上下载下来的项目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：作者想把他感兴趣的项目保存到这个文件夹（C:\Users\chenqijun\Desktop\Files\study）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进行下面的操作：右键单击XX目录 -&gt; 选择Open Git Bash Here打开&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;windows11系统可能是：右键单击XX目录 -&gt; 显示更多选项 -&gt; Open Git Bash Here&lt;/p&gt;
&lt;p&gt;本例是右键单击study目录，选择Open Git Bash Here打开，然后按下面的步骤输入指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开你感兴趣的项目所在仓库的GitHub网页，点击页面里的按钮Code -&gt; HTTPS -&gt;复制那串URL。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里以 &lt;strong&gt;&lt;a href=&quot;https://github.com/chenxulin/git-practice&quot;&gt;https://github.com/chenxulin/git-practice&lt;/a&gt;&lt;/strong&gt; 为例，点击页面里的按钮Code -&gt; HTTPS -&gt;复制那串URL（本例复制 &lt;strong&gt;&lt;a href=&quot;https://github.com/chenxulin/git-practice.git&quot;&gt;https://github.com/chenxulin/git-practice.git&lt;/a&gt;&lt;/strong&gt; ）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在已经打开的Open Git Bash Here终端界面输入指令git clone &lt;URL&gt;，克隆你感兴趣的项目。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入 &lt;strong&gt;git clone &lt;a href=&quot;https://github.com/chenxulin/git-practice.git&quot;&gt;https://github.com/chenxulin/git-practice.git&lt;/a&gt;&lt;/strong&gt; 即可把GitHub上的项目克隆到准备好的目录中。（有两种clone方式，使用HTTPS和SSH clone都可以，作者初学的时候使用的是HTTPS方式clone，故只介绍HTTPS来进行clone。SSH clone 方式有它的优点，想用SSH clone请自学。）&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;Cloning into &lt;span class=&quot;token string&quot;&gt;&apos;git-practice&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.
remote: Enumerating objects: &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;, done.
remote: Counting objects: &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;% &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;/3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, done.
remote: Total &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delta &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, reused &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;delta &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, pack-reused &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;from &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
Receiving objects: &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;% &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;/3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, done.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;终端界面如上，就说明已经把该项目从GitHub上克隆到本地目录中了，打开本地你准备好的目录即可看到该项目。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;克隆好后就可以使用开发工具（如IDEA、VS Code等）对下载的项目进行学习或者二次开发了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果远端仓库的内容将来更新了，本地仓库可以使用git pull指令进行更新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;&lt;strong&gt;如何把本地项目上传到GitHub&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;把一个本地项目上传到自己的GitHub上，采用以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先需要建立一个GitHub远端仓库，进入你的GitHub主页 -&gt; 找到并点击按钮New -&gt; 输入&lt;strong&gt;必填字段&lt;/strong&gt;仓库名(Repository name) -&gt;拉到页面最下面点击&lt;strong&gt;Create repository&lt;/strong&gt; ，其他选项使用默认设置。这样就建立好一个名叫XX的GitHub仓库了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：也可以不用默认设置，自己进行配置。每个选项有什么功能请自学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到&lt;strong&gt;本地项目&lt;/strong&gt;所在的那个文件夹，右键单击该文件夹，打开Open Git Bash Here终端界面，执行下面的操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以C:\Users\chenqijun\Desktop\Files\study\git-practice-upload为例，即右键单击git-practice-upload，打开Open Git Bash Here终端界面，然后进行操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.初始化仓库：输入 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; init 指令后回车，初始化本地仓库，便于后续进行仓库管理
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.项目文件放入暂存区：输入 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--all&lt;/span&gt; 指令后回车
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.暂存区的文件放入本地仓库：输入 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;这里写你想写的注释&apos;&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;.建立本地仓库与GitHub仓库的连接：输入 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; origin &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;你自己创建的仓库URL&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;例：git remote &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; orgin https://github.com/chenxulin/git-practice.git&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;.把本地项目提交到GitHub上：输入 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push &lt;span class=&quot;token parameter variable&quot;&gt;-u&lt;/span&gt; orgin master

依次按顺序完成以上步骤，把一个本地项目上传到你准备好的GitHub仓库中了&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;学会了下载别人项目和上传自己的项目，Git和GitHub的初步使用你已经学会了。现在，你已经是一名合格的Ctrl C + Ctrl V开发者了。&lt;/p&gt;
&lt;p&gt;最后是必不可少（有时可以少）的胡言乱语时刻，我想说的是：&lt;strong&gt;千里之行，始于CV&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Git管理文件（以Windows系统为例）&lt;/h4&gt;
&lt;h6&gt;git提交到本地仓库&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对项目开始进行版本控制管理&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; init   // 初始化仓库指令&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这条指令实质上就是在项目所在文件夹里建立了一个.git的目录文件，Git版本控制就是依靠.git目录进行的。在对整个项目进行版本控制时，无论哪个文件或目录被删除了都能够找回来，但如果.git目录被删除了就没办法找回来了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.git文件默认被windows系统隐藏了，看不见是正常的，也可以把它显示出来（打开我的电脑 -&gt; 点查看 -&gt; 点显示 -&gt;点击勾选隐藏的项目）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将某个文件或者目录提交至暂存区&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; 文件名   // 例如：git &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; hello.md 就是将hello.md文件放入暂存区
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; 目录名   // 例如：git &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; static 就是将static目录下的所有文件放入暂存区
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; *.后缀名 // 例如：git &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; *.html 就是将此目录下的所有以html结尾的文件放入暂存区

// Git &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.x后，下面git &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --all和git &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; .用法是一样的。古老的版本的区别请自学
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--all&lt;/span&gt;   // 将所有文件和文件夹加入暂存区
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;       // 将所有文件和文件夹加入暂存区

注：空目录是无法加入到暂存区的。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是一些基本用法，设想一种特别的情况，如果你用git add 把某个文件加入暂存区，但还未commit到本地仓库，这时你改动了你add的文件，新手可能会直接commit，但这样是错误的，你需要重新git add这个文件，再commit。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将暂存区的文件或目录提交（commit）到本地仓库&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;注释&apos;&lt;/span&gt;  // 将暂存区的文件或者目录全部送到本地仓库&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;git commit -m  &apos;注释&apos; 只是把暂存区的文件或者目录送到了本地仓库，那些还未通过git add命令送入暂存区的文件并不会被提交到本地仓库。一次commit会产生一条提交记录，git可以通过这些记录来进行回溯。&lt;/p&gt;
&lt;p&gt;注释是必要的，不加注释是没法commit的。进行注释可以让其他人知道这些文件进行了什么样的改动。注释内容要求简洁，清晰，有逻辑。&lt;/p&gt;
&lt;p&gt;并不是必须每次git add xxx之后都使用一次git commit -m &apos;注释&apos;指令立即提交，可以git add xxx然后又跑去开发别的文件，开发好后又使用git add xxx把新开发的文件加入暂存区，然后使用git commit &apos;注释&apos;一起提交。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;那么，究竟什么时候commit呢？
一般来说：
	&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.完成某一个任务后：大到开发完一整个系统，小到完成某个小功能。
	&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.下班的时候：虽然可能任务还没完成，但至少先commit今天的进度。
	&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.你想什么时候提交就什么时候提交。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;从项目管理的角度看，第三种方式不是一个好的方式，因为程序世界总是充斥着条理，有个性往往会造成混乱。那么，我为什么要写上这种commit方式？答：我想写我就写。&lt;del&gt;（我commit后，哪管它洪水滔天）&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在有必要对上述内容做一个总结，Git对一个项目进行版本控制时，被管理的项目分为工作目录、暂存区、本地仓库，必须先把工作目录添加（git add xxx）到暂存区，再将暂存区的文件提交（git commit -m &apos;注释&apos;）到本地仓库。&lt;/p&gt;
&lt;hr&gt;
&lt;h6&gt;git命令拾遗&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;查看当前状态：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; status  // 查看当前状态&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这条指令十分有用，比如查看暂存区有哪些文件未加到暂存区，哪些文件未提交等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看当前目录有哪些文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-al&lt;/span&gt;   // 查看当前目录下有什么文件&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;使用git mv命令修改文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; 文件名1 文件名2  // 将某文件改名
// 例如：将hello.md文件改名成world.md，改动会被加入暂存区
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; hello.md world.md&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h6&gt;git删除文件与找回文件&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;rm命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; 文件名.后缀名   // 删除xx文件，但改动未加入暂存区
&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; 目录名      // 删除xx 目录，但改动未加入暂存区&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;使用git rm命令删除文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; 文件名.后缀名   // 删除xx文件，并将改动加入暂存区
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; 目录名      // 删除此目录下的所有文件，并将改动加入暂存区  
// 删除工作目录中的hello.md文件，并将这个改动加入暂存区，但并未commit
例如：git &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; hello.md 
// 删除工作目录中的src目录下的所有文件，并将这个改动加入暂存区，但并未commit
例如：git &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; src&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;让git不再跟踪某文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// --cached参数，不删除文件，只是让git不再跟踪该文件，且改动已放入到暂存区
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; xxx &lt;span class=&quot;token parameter variable&quot;&gt;--cached&lt;/span&gt;  

// 可以使用 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; restore &lt;span class=&quot;token parameter variable&quot;&gt;--staged&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;file&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;来取消放入暂存区
// 再用一次 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; restore &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;flie&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;即可放回工作目录或者用 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout xxx指令也行&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;使用git checkout找回删除的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// 文件已经删除，但此改动未用git add加入暂存区
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout 文件名.后缀名   // 把删除的xx文件放回工作目录
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;             // 将删除的所有文件放回工作目录&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// 文件已经删除，且改动已加入暂存区，但未commit

// 把删除的xx文件的改动撤销,再使用git checkout命令把删除的文件放回工作目录
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; restore &lt;span class=&quot;token parameter variable&quot;&gt;--staged&lt;/span&gt; 文件名.后缀名 
// 把删除的xx目录的改动撤销,再使用git checkout命令把删除的目录及目录下的文件放回工作目录
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; restore &lt;span class=&quot;token parameter variable&quot;&gt;--staged&lt;/span&gt; 目录名
// 把删除的所有文件的改动撤销,再使用git checkout命令把删除的所有文件放回工作目录
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; restore &lt;span class=&quot;token parameter variable&quot;&gt;--staged&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// commit记录的回退，用 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset指令,见commit记录那一节的内容
// 文件已经删除，且改动已加入暂存区，并且已经提交&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;commit记录&lt;/h4&gt;
&lt;h6&gt;查询commit记录&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查看commit记录的常用指令&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log     // 查看完整commit记录
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token parameter variable&quot;&gt;--oneline&lt;/span&gt; // 精简版commit，一行一条commit记录
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token parameter variable&quot;&gt;--graph&lt;/span&gt;  // 有点好看的完整commit记录
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token parameter variable&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--graph&lt;/span&gt; // 既精简又好看的一行commit记录

注：按q退出commit日志记录&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;commit记录中包括：一串十六进制数、作者（Author）、时间（Date）、注释。例如：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;* commit 841458cebfb2023501574637d2bf8696e2948097 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HEAD -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; upload, upload/upload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Author: chenxulin &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1011468693&lt;/span&gt;@qq.com&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; Date:   Sun Dec &lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;:32:21 &lt;span class=&quot;token number&quot;&gt;2024&lt;/span&gt; +0800
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;     &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; src/test3.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;这串十六进制数姑且看做这条记录的唯一标识好了，虽然可能并不唯一，但不唯一的几率极小。因为不影响使用，如果你对它感兴趣，请自学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按开发者名查询commit记录&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token parameter variable&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;xxx&apos;&lt;/span&gt; // 查询某位开发者的提交记录

例如：git log &lt;span class=&quot;token parameter variable&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;chenxulin&apos;&lt;/span&gt; 指令
终端上的输出如下：
841458c &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HEAD -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; upload, upload/upload&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; src/test3.txt
&lt;span class=&quot;token number&quot;&gt;7914301&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;upload/master, origin/master, origin/HEAD, master&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; directory
75e78e8 first commit

当然不同的提交记录有不同的输出，这里只是举例用。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找某一时间段的commit记录&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// 找出今天从上午9点到上午12点之间所有人的commit
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token parameter variable&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--since&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;9am&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--until&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;12am&apos;&lt;/span&gt;
// 找出从2021年后，每天上午9点到上午12点之间所有人的commit
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token parameter variable&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--since&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;9am&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--until&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;12am&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--after&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;2021&apos;&lt;/span&gt;

例如：作者在终端上输入
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token parameter variable&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--since&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;13pm&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--until&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;20pm&apos;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--after&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;2023&apos;&lt;/span&gt;
终端上会显示：
&lt;span class=&quot;token number&quot;&gt;7914301&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;upload/master, origin/master, origin/HEAD, master&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; directory
75e78e8 first commit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查询某个具体文件的commit记录&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log 文件名.后缀名     // 查看此文件的commit记录
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; log &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; 文件名.后缀名  // 查看此文件每次commit做了什么改动&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;查询某行代码是谁写的&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; blame 文件名.后缀名         // 找出此文件的每一行代码是谁写的
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; blame &lt;span class=&quot;token parameter variable&quot;&gt;-L&lt;/span&gt; A,B 文件名.后缀名  // 找出此文件第A行到第B行的代码是谁写的&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;修改commit记录的注释&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// 将最近的一次commit的注释用新的注释进行覆盖
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit &lt;span class=&quot;token parameter variable&quot;&gt;--amend&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;新的注释&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;追加文件到最近一次commit中&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// 先用 &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;flie&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;将其加入暂存区
// 将&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;file&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;追加到最近一次commit中，且不改变其已提交的注释
   &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit &lt;span class=&quot;token parameter variable&quot;&gt;--amend&lt;/span&gt; --no-edit 
注：像这样改动commit内容的操作，尽量不要用在已经push出去的commit上&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;擦除掉某条commit记录&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset xxx // 前往指定标识的commit
// 例如前往标识为85e7e30的commit
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset 85e7e30
// 前往master/HEAD/标识符的第前N次commit
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset master^
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset master^^
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset master~3
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset HEAD^
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reset e12d8ef^
// 参数： --mixed, --soft, &lt;span class=&quot;token parameter variable&quot;&gt;--hard&lt;/span&gt;
&lt;span class=&quot;token parameter variable&quot;&gt;--mixed&lt;/span&gt; commit拆出来的文件留在工作目录，不放回暂存区
&lt;span class=&quot;token parameter variable&quot;&gt;--soft&lt;/span&gt;  commit拆出来的文件留在工作目录，放回暂存区
&lt;span class=&quot;token parameter variable&quot;&gt;--hard&lt;/span&gt;  commit拆出来的文件,工作目录和暂存区都删除
例：git reset 85e7e30 &lt;span class=&quot;token parameter variable&quot;&gt;--hard&lt;/span&gt;

// 查看引用日志reflog
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; reflog  // 可以查到那些reset后消失的commit的标识

// 用git revert指令来删除最后一次提交
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; revert HEAD --no-edit   // 增加一次commit，这次commit的作用是删除上一次commit。
注：这样做的好处是可以保留所有的commit记录，即上一次commit记录还在，只是上一次commit的内容被取消了，坏处是会增加一次commit记录，是commit记录变多，维护起来变得冗长。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;多分支协作开发&lt;/h2&gt;
&lt;p&gt;在实际项目的开发过程中，个人的力量总是有限的，一个大型的项目往往需要多位开发者协作完成，为了使得每位开发者提交代码的过程不至于相互发生冲突而产生混乱，每一位开发者都会在属于自己的分支上进行开发，最后把各自开发的结果合并起来，这就是多分支协作开发。&lt;/p&gt;
&lt;h6&gt;当前所在分支&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch  // 输出当前在这个项目中有哪些分支

Git会默认设置一个名为master的分支，用*表示当前正在哪个分支上&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;更改分支名称&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; 原分支名 新分支名

// 例如更改empire分支的名称改为paper-tiger
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; empire paper-tiger&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;新建分支&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch 分支名  

// 例如:新建一个名为cat的分支
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;分支切换&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout 分支名

// 切换当前分支到cat分支上
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;

注：已经改动但未commit，切换分支后，也能将改动直接提交到新分支上。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;删除分支&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; 分支名
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token parameter variable&quot;&gt;-D&lt;/span&gt; 分支名

// 例如：删除名叫cat的分支
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;
// 若cat分支上有内容还未合并，-d参数无法将分支删除，改用-D参数即可将其强制删除
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token parameter variable&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;

注：没有什么分支是不能删除的，包括默认的master分支也是能删除的（master分支只是默认的分支，没有其他特别之处）。
注: 当前在分支A上，不能删除分支A，必须先切换到分支B上，才能对A分支进行删除操作。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;合并分支&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout 分支名   // 切换到目标分支
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge 分支名      // 把分支名代表的分支合并到当前分支上
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge 分支名 --no-ff // 额外多出一个commit记录这次合并结果

// 把cat分支合并到master分支上
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout master  // 先把分支切换回master分支
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;        // 把cat分支合并到master分支上&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;另一种合并分支的方法&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// 以给定的分支为基准，将当前分支合并到指定分支上
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; rebase 分支名

// 例：当前在cat分支上，将cat分支合并到dog分支上
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; rebase dog

注：使用rebase的好处是不想merge合并那样会产生额外合并专用的commit，坏处是rebase合并不如merge合并直观。
注：对于还未push出去的commit，可以使用rebase分支来整理commit。但对于公共commit，尽量不要使用rebase合并。

思考一下：
	&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;.除此之外，rebase合并和merge合并的区别在哪里?
	&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;.如何取消merge合并和rebase合并。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;挽救分支&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;挽救未合并的分支的具体方法以下面的操作为例：
	假设cat有两个commit还未提交
	// 强行删除未合并的分支cat，删除后得到一个标识号b174a5a
	&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch &lt;span class=&quot;token parameter variable&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt;  // 会得到一个cat当前指向的commit的标识号b174a5a
	// 找回这个commit，新建一个分支指向这个标识号b174a5a
	&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch new_cat b174a5a
	这样就找回了刚刚未合并的分支
	
注：如果刚刚删除的分支指向的commit的标识号忘记了，则用git reflog指令找回，reflog默认会保留30天。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;回到过去&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;回到过去的某个commit，从那个commit处新建一个分支
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch 分支名 标识号

例如，在commit标识号为657fce7的commit处开一个名为bird的分支
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; branch bird 657fce7
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout bird   // 切换到刚刚创建的分支bird上&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;标签&lt;/h2&gt;
&lt;h6&gt;轻量标签(lightweight tag)&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag 标签名 commit标识号

// 给标识号为51d54ff的commit添加一个名为big_cat的轻量标签
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag big_cat 51d54ff

// 注：如果只使用git tag 标签名 ，但未指定commit标识号，则将会把标签贴在当前所在的commit上&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;有附注的标签(annotated tag)&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;// -a参数就是指的是创建有附注的标签， -m指的是需要在后面添加注释
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag 标签名 commit标识号 &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;注释&quot;&lt;/span&gt;

// 例如：给标识号为51d54ff的commit添加一个名为big_cat的带附注的标签
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag big_cat 51d54ff &lt;span class=&quot;token parameter variable&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Big Cats are comming!&apos;&lt;/span&gt;

注：有附注的标签主要用作软件版本号，轻量标签则是用于个人使用或者简单标记
注：有附注标签的好处是可以知道更多关于这张标签的信息，而轻量标签的信息量较少。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;查看标签的信息&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; show 标签名   // 查看标签信息

// 例如查看big_cat标签的信息
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; show big_cat

注：轻量标签只有标签指向的那个commit的信息，有附注的标签多了一些信息，包括谁在什么时候贴了这张标签等。&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;删除标签&lt;/h6&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;不管哪一种标签，其本质都像是一张贴纸，撕掉一张贴纸并不会造成commit或文档不见，只是把这张贴纸撕掉而已。

&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; 标签名

// 例如：删除名为big_cat的标签
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; tag &lt;span class=&quot;token parameter variable&quot;&gt;-d&lt;/span&gt; big_cat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h6&gt;总结&lt;/h6&gt;
&lt;p&gt;断断续续写了半个月，总的来说，写的不怎么样，不满意。原因大概有两点，&lt;/p&gt;
&lt;p&gt;一，最开始没做好构思，只顾着学完记录下来。&lt;/p&gt;
&lt;p&gt;二，初学时如雾里看花，内容的主线逻辑不太理得清。&lt;/p&gt;
&lt;p&gt;写到后面才考虑到应当有场景+用法+实例，才对全部内容有一个大概的认识，但为时已晚。&lt;/p&gt;
&lt;p&gt;后面复习Git或者深入学习Git的时候应对此文档进行重新梳理。&lt;/p&gt;
&lt;p&gt;以上内容即为Git的基本用法，进阶用法请自学。&lt;/p&gt;
&lt;p&gt;2025.1.11 晚&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to active typora]]></title><description><![CDATA[Typora是一款好用的轻量级markdown编辑器，适用于MacOS、Windows和Linux三种操作系统。与其他Markdown编辑器不同的是，Typora…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/typora/Typora active/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/typora/Typora active/</guid><pubDate>Fri, 27 Dec 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Typora是一款好用的轻量级markdown编辑器，适用于MacOS、Windows和Linux三种操作系统。与其他Markdown编辑器不同的是，Typora没有采用源代码和预览双栏显示的方式，而是采用&lt;strong&gt;所见即所得&lt;/strong&gt;的编辑方式，实现了&lt;strong&gt;即时预览的功能&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;下载&lt;/h4&gt;
&lt;p&gt;根据你的操作系统从官网下载相应版本的typora，安装到电脑上，想装在哪里装在哪里。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Typora 官方中文站：&lt;a href=&quot;https://typoraio.cn/&quot;&gt;https://typoraio.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://typora.io/&quot;&gt;https://typora.io/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;激活&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;方法一：尊重版权，支持正版，89元解君愁。&lt;/li&gt;
&lt;li&gt;方法二：科技狠活，物美价零，狠狠0元购。
&lt;ul&gt;
&lt;li&gt;下载激活工具：&lt;a href=&quot;https://pan.baidu.com/s/1CDbgbTrIWfvA_TKBeYmFUA?pwd=8c6n&quot;&gt;active tool&lt;/a&gt;(百度网盘提取码：8c6n)&lt;/li&gt;
&lt;li&gt;将active tool中的两个exe文件放入typora的安装目录下（例如我的安装目录是：D:\Typera）&lt;/li&gt;
&lt;li&gt;后面的激活步骤按照README.txt进行操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;使用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;markdown语法，出门左转，自学成才。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;危险警告：不要花时间在选择主题上，不然你就会遇到和我一样的情况。这个主题好看，用一下，欸，这个主题也不错，再用一下。时间过去了，啥活也没干。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此间乐，不思work&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好了，已经在主题调试以及写这篇文档上浪费好几个小时了，实在不能再跟着感觉走了，到此，完毕。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Test]]></title><description><![CDATA[…]]></description><link>https://gatsbystarterblogsource.gatsbyjs.io/Z-Test/test/</link><guid isPermaLink="false">https://gatsbystarterblogsource.gatsbyjs.io/Z-Test/test/</guid><pubDate>Thu, 26 Dec 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;谁第一个将土地圈起来，胆敢说“这是我的”，并且能够找到一些十分天真的人相信他，谁就是文明社会真正的奠基者。假如这时有人拔掉木桩，填平沟壑，并且向他的同类大声呼吁：“不要听信这个骗子的话，如果你们忘记果实为大家所有，而土地不属于任何人，你们就全完了！”那么，人类可以避免多少罪恶、战争、谋杀、苦难和暴行啊！&lt;/p&gt;
&lt;p&gt;上面这一段文字是用于测试的文字，文字摘录自《论人类不平等的起源和基础》，作者：让·雅克·卢梭。&lt;/p&gt;</content:encoded></item></channel></rss>