{"componentChunkName":"component---src-templates-blog-post-js","path":"/How to use Git/Git/","result":{"data":{"site":{"siteMetadata":{"title":"Crithinking"}},"markdownRemark":{"id":"3dc6140a-076f-536b-9209-f31ac0fe20e7","excerpt":"Git 是一款十分好用的分布式版本控制工具，作为一名开发者，无论你喜不喜欢它，你都不能离开它，也不能不学习它。 Git Git下载安装、环境配置网上教程非常详细，出门左转，请自学，本文档不再介绍。 需要指明的是，GitHub不等于Git。GitHub是一个拥有很多仓库的在线网站，它的本体是一个Git服务器，这个Git…","html":"<p>Git 是一款十分好用的分布式版本控制工具，作为一名开发者，无论你喜不喜欢它，你都不能离开它，也不能不学习它。</p>\n<h2>Git</h2>\n<p>Git下载安装、环境配置网上教程非常详细，出门左转，请自学，本文档不再介绍。</p>\n<blockquote>\n<p>需要指明的是，<strong>GitHub不等于Git</strong>。GitHub是一个拥有很多仓库的在线网站，它的本体是一个Git服务器，这个Git服务器上存放着开发者们开发的各种项目。开发者们可以通过版本控制工具（如Git、SVN等）来使用GitHub上的各种项目。Git是一款分布式版本控制工具，我们可以使用Git来对项目进行管理，也可以通过它来使用GitHub上的各种项目。</p>\n</blockquote>\n<h2>从零开始使用Git</h2>\n<p>Git下载、安装、环境配置完成后，本章节介绍GitHub的使用、Git管理文件。</p>\n<h4>GitHub的使用</h4>\n<p>GitHub有两种常用的使用场景，一是从GitHub上下载项目到本地（以便于自己学习该项目或者在该项目的基础上做二次开发），二是把本地项目上传到GitHub（如果你没有自己的Git服务器的话）。本节先介绍<strong>如何从GitHub上下载项目</strong>，再介绍<strong>如何把本地项目上传到GitHub</strong>。</p>\n<h6><strong>如何从GitHub上下载项目</strong></h6>\n<p>把一个项目从GitHub上下载到本地，采用以下的步骤：</p>\n<ul>\n<li>\n<p>首先在本地计算机上创建一个目录文件用来保存从GitHub上下载下来的项目</p>\n<blockquote>\n<p>例如：作者想把他感兴趣的项目保存到这个文件夹（C:\\Users\\chenqijun\\Desktop\\Files\\study）</p>\n</blockquote>\n</li>\n<li>\n<p>进行下面的操作：右键单击XX目录 -> 选择Open Git Bash Here打开</p>\n<blockquote>\n<p>windows11系统可能是：右键单击XX目录 -> 显示更多选项 -> Open Git Bash Here</p>\n<p>本例是右键单击study目录，选择Open Git Bash Here打开，然后按下面的步骤输入指令</p>\n</blockquote>\n</li>\n<li>\n<p>打开你感兴趣的项目所在仓库的GitHub网页，点击页面里的按钮Code -> HTTPS ->复制那串URL。</p>\n<blockquote>\n<p>这里以 <strong><a href=\"https://github.com/chenxulin/git-practice\">https://github.com/chenxulin/git-practice</a></strong> 为例，点击页面里的按钮Code -> HTTPS ->复制那串URL（本例复制 <strong><a href=\"https://github.com/chenxulin/git-practice.git\">https://github.com/chenxulin/git-practice.git</a></strong> ）。</p>\n</blockquote>\n</li>\n<li>\n<p>在已经打开的Open Git Bash Here终端界面输入指令git clone <URL>，克隆你感兴趣的项目。</p>\n<blockquote>\n<p>输入 <strong>git clone <a href=\"https://github.com/chenxulin/git-practice.git\">https://github.com/chenxulin/git-practice.git</a></strong> 即可把GitHub上的项目克隆到准备好的目录中。（有两种clone方式，使用HTTPS和SSH clone都可以，作者初学的时候使用的是HTTPS方式clone，故只介绍HTTPS来进行clone。SSH clone 方式有它的优点，想用SSH clone请自学。）</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">Cloning into <span class=\"token string\">'git-practice'</span><span class=\"token punctuation\">..</span>.\r\nremote: Enumerating objects: <span class=\"token number\">3</span>, done.\r\nremote: Counting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, done.\r\nremote: Total <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>from <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, done.</code></pre></div>\n<p>终端界面如上，就说明已经把该项目从GitHub上克隆到本地目录中了，打开本地你准备好的目录即可看到该项目。</p>\n</blockquote>\n</li>\n<li>\n<p>克隆好后就可以使用开发工具（如IDEA、VS Code等）对下载的项目进行学习或者二次开发了。</p>\n</li>\n<li>\n<p>如果远端仓库的内容将来更新了，本地仓库可以使用git pull指令进行更新。</p>\n</li>\n</ul>\n<h6><strong>如何把本地项目上传到GitHub</strong></h6>\n<p>把一个本地项目上传到自己的GitHub上，采用以下步骤：</p>\n<ul>\n<li>\n<p>首先需要建立一个GitHub远端仓库，进入你的GitHub主页 -> 找到并点击按钮New -> 输入<strong>必填字段</strong>仓库名(Repository name) ->拉到页面最下面点击<strong>Create repository</strong> ，其他选项使用默认设置。这样就建立好一个名叫XX的GitHub仓库了。</p>\n<blockquote>\n<p>注：也可以不用默认设置，自己进行配置。每个选项有什么功能请自学。</p>\n</blockquote>\n</li>\n<li>\n<p>找到<strong>本地项目</strong>所在的那个文件夹，右键单击该文件夹，打开Open Git Bash Here终端界面，执行下面的操作。</p>\n<blockquote>\n<p>以C:\\Users\\chenqijun\\Desktop\\Files\\study\\git-practice-upload为例，即右键单击git-practice-upload，打开Open Git Bash Here终端界面，然后进行操作。</p>\n</blockquote>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token number\">1</span>.初始化仓库：输入 <span class=\"token function\">git</span> init 指令后回车，初始化本地仓库，便于后续进行仓库管理\r\n<span class=\"token number\">2</span>.项目文件放入暂存区：输入 <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">--all</span> 指令后回车\r\n<span class=\"token number\">3</span>.暂存区的文件放入本地仓库：输入 <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'这里写你想写的注释'</span>\r\n<span class=\"token number\">4</span>.建立本地仓库与GitHub仓库的连接：输入 <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token operator\">&lt;</span>你自己创建的仓库URL<span class=\"token operator\">></span>\r\n <span class=\"token punctuation\">(</span>例：git remote <span class=\"token function\">add</span> orgin https://github.com/chenxulin/git-practice.git<span class=\"token punctuation\">)</span>\r\n<span class=\"token number\">5</span>.把本地项目提交到GitHub上：输入 <span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> orgin master\r\n\r\n依次按顺序完成以上步骤，把一个本地项目上传到你准备好的GitHub仓库中了</code></pre></div>\n<p>学会了下载别人项目和上传自己的项目，Git和GitHub的初步使用你已经学会了。现在，你已经是一名合格的Ctrl C + Ctrl V开发者了。</p>\n<p>最后是必不可少（有时可以少）的胡言乱语时刻，我想说的是：<strong>千里之行，始于CV</strong>。</p>\n<hr>\n<h4>Git管理文件（以Windows系统为例）</h4>\n<h6>git提交到本地仓库</h6>\n<ul>\n<li>\n<p>对项目开始进行版本控制管理</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> init   // 初始化仓库指令</code></pre></div>\n<p>这条指令实质上就是在项目所在文件夹里建立了一个.git的目录文件，Git版本控制就是依靠.git目录进行的。在对整个项目进行版本控制时，无论哪个文件或目录被删除了都能够找回来，但如果.git目录被删除了就没办法找回来了。</p>\n<blockquote>\n<p>.git文件默认被windows系统隐藏了，看不见是正常的，也可以把它显示出来（打开我的电脑 -> 点查看 -> 点显示 ->点击勾选隐藏的项目）。</p>\n</blockquote>\n</li>\n<li>\n<p>将某个文件或者目录提交至暂存区</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> 文件名   // 例如：git <span class=\"token function\">add</span> hello.md 就是将hello.md文件放入暂存区\r\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> 目录名   // 例如：git <span class=\"token function\">add</span> static 就是将static目录下的所有文件放入暂存区\r\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> *.后缀名 // 例如：git <span class=\"token function\">add</span> *.html 就是将此目录下的所有以html结尾的文件放入暂存区\r\n\r\n// Git <span class=\"token number\">2</span>.x后，下面git <span class=\"token function\">add</span> --all和git <span class=\"token function\">add</span> .用法是一样的。古老的版本的区别请自学\r\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">--all</span>   // 将所有文件和文件夹加入暂存区\r\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span>       // 将所有文件和文件夹加入暂存区\r\n\r\n注：空目录是无法加入到暂存区的。</code></pre></div>\n<p>以上是一些基本用法，设想一种特别的情况，如果你用git add 把某个文件加入暂存区，但还未commit到本地仓库，这时你改动了你add的文件，新手可能会直接commit，但这样是错误的，你需要重新git add这个文件，再commit。</p>\n<ul>\n<li>\n<p>将暂存区的文件或目录提交（commit）到本地仓库</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'注释'</span>  // 将暂存区的文件或者目录全部送到本地仓库</code></pre></div>\n<p>git commit -m  '注释' 只是把暂存区的文件或者目录送到了本地仓库，那些还未通过git add命令送入暂存区的文件并不会被提交到本地仓库。一次commit会产生一条提交记录，git可以通过这些记录来进行回溯。</p>\n<p>注释是必要的，不加注释是没法commit的。进行注释可以让其他人知道这些文件进行了什么样的改动。注释内容要求简洁，清晰，有逻辑。</p>\n<p>并不是必须每次git add xxx之后都使用一次git commit -m '注释'指令立即提交，可以git add xxx然后又跑去开发别的文件，开发好后又使用git add xxx把新开发的文件加入暂存区，然后使用git commit '注释'一起提交。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">那么，究竟什么时候commit呢？\r\n一般来说：\r\n\t<span class=\"token number\">1</span>.完成某一个任务后：大到开发完一整个系统，小到完成某个小功能。\r\n\t<span class=\"token number\">2</span>.下班的时候：虽然可能任务还没完成，但至少先commit今天的进度。\r\n\t<span class=\"token number\">3</span>.你想什么时候提交就什么时候提交。</code></pre></div>\n<blockquote>\n<p>从项目管理的角度看，第三种方式不是一个好的方式，因为程序世界总是充斥着条理，有个性往往会造成混乱。那么，我为什么要写上这种commit方式？答：我想写我就写。<del>（我commit后，哪管它洪水滔天）</del></p>\n</blockquote>\n</li>\n</ul>\n<p>现在有必要对上述内容做一个总结，Git对一个项目进行版本控制时，被管理的项目分为工作目录、暂存区、本地仓库，必须先把工作目录添加（git add xxx）到暂存区，再将暂存区的文件提交（git commit -m '注释'）到本地仓库。</p>\n<hr>\n<h6>git命令拾遗</h6>\n<ul>\n<li>查看当前状态：</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> status  // 查看当前状态</code></pre></div>\n<p>这条指令十分有用，比如查看暂存区有哪些文件未加到暂存区，哪些文件未提交等。</p>\n<ul>\n<li>查看当前目录有哪些文件</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-al</span>   // 查看当前目录下有什么文件</code></pre></div>\n<ul>\n<li>使用git mv命令修改文件名</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token function\">mv</span> 文件名1 文件名2  // 将某文件改名\r\n// 例如：将hello.md文件改名成world.md，改动会被加入暂存区\r\n<span class=\"token function\">git</span> <span class=\"token function\">mv</span> hello.md world.md</code></pre></div>\n<hr>\n<h6>git删除文件与找回文件</h6>\n<ul>\n<li>rm命令</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">rm</span> 文件名.后缀名   // 删除xx文件，但改动未加入暂存区\r\n<span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> 目录名      // 删除xx 目录，但改动未加入暂存区</code></pre></div>\n<ul>\n<li>使用git rm命令删除文件</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> <span class=\"token function\">rm</span> 文件名.后缀名   // 删除xx文件，并将改动加入暂存区\r\n<span class=\"token function\">git</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> 目录名      // 删除此目录下的所有文件，并将改动加入暂存区  \r\n// 删除工作目录中的hello.md文件，并将这个改动加入暂存区，但并未commit\r\n例如：git <span class=\"token function\">rm</span> hello.md \r\n// 删除工作目录中的src目录下的所有文件，并将这个改动加入暂存区，但并未commit\r\n例如：git <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> src</code></pre></div>\n<ul>\n<li>让git不再跟踪某文件</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// --cached参数，不删除文件，只是让git不再跟踪该文件，且改动已放入到暂存区\r\n<span class=\"token function\">git</span> <span class=\"token function\">rm</span> xxx <span class=\"token parameter variable\">--cached</span>  \r\n\r\n// 可以使用 <span class=\"token function\">git</span> restore <span class=\"token parameter variable\">--staged</span> <span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span>来取消放入暂存区\r\n// 再用一次 <span class=\"token function\">git</span> restore <span class=\"token operator\">&lt;</span>flie<span class=\"token operator\">></span>即可放回工作目录或者用 <span class=\"token function\">git</span> checkout xxx指令也行</code></pre></div>\n<ul>\n<li>使用git checkout找回删除的文件</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 文件已经删除，但此改动未用git add加入暂存区\r\n<span class=\"token function\">git</span> checkout 文件名.后缀名   // 把删除的xx文件放回工作目录\r\n<span class=\"token function\">git</span> checkout <span class=\"token builtin class-name\">.</span>             // 将删除的所有文件放回工作目录</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 文件已经删除，且改动已加入暂存区，但未commit\r\n\r\n// 把删除的xx文件的改动撤销,再使用git checkout命令把删除的文件放回工作目录\r\n<span class=\"token function\">git</span> restore <span class=\"token parameter variable\">--staged</span> 文件名.后缀名 \r\n// 把删除的xx目录的改动撤销,再使用git checkout命令把删除的目录及目录下的文件放回工作目录\r\n<span class=\"token function\">git</span> restore <span class=\"token parameter variable\">--staged</span> 目录名\r\n// 把删除的所有文件的改动撤销,再使用git checkout命令把删除的所有文件放回工作目录\r\n<span class=\"token function\">git</span> restore <span class=\"token parameter variable\">--staged</span> <span class=\"token builtin class-name\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// commit记录的回退，用 <span class=\"token function\">git</span> reset指令,见commit记录那一节的内容\r\n// 文件已经删除，且改动已加入暂存区，并且已经提交</code></pre></div>\n<h4>commit记录</h4>\n<h6>查询commit记录</h6>\n<ul>\n<li>\n<p>查看commit记录的常用指令</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> log     // 查看完整commit记录\r\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span> // 精简版commit，一行一条commit记录\r\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--graph</span>  // 有点好看的完整commit记录\r\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span> <span class=\"token parameter variable\">--graph</span> // 既精简又好看的一行commit记录\r\n\r\n注：按q退出commit日志记录</code></pre></div>\n<p>commit记录中包括：一串十六进制数、作者（Author）、时间（Date）、注释。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">* commit 841458cebfb2023501574637d2bf8696e2948097 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> upload, upload/upload<span class=\"token punctuation\">)</span>\r\n<span class=\"token operator\">|</span> Author: chenxulin <span class=\"token operator\">&lt;</span><span class=\"token number\">1011468693</span>@qq.com<span class=\"token operator\">></span>\r\n<span class=\"token operator\">|</span> Date:   Sun Dec <span class=\"token number\">29</span> <span class=\"token number\">20</span>:32:21 <span class=\"token number\">2024</span> +0800\r\n<span class=\"token operator\">|</span>\r\n<span class=\"token operator\">|</span>     <span class=\"token builtin class-name\">test</span> src/test3.txt</code></pre></div>\n<blockquote>\n<p>这串十六进制数姑且看做这条记录的唯一标识好了，虽然可能并不唯一，但不唯一的几率极小。因为不影响使用，如果你对它感兴趣，请自学。</p>\n</blockquote>\n</li>\n<li>\n<p>按开发者名查询commit记录</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span> <span class=\"token parameter variable\">--author</span><span class=\"token operator\">=</span><span class=\"token string\">'xxx'</span> // 查询某位开发者的提交记录\r\n\r\n例如：git log <span class=\"token parameter variable\">--oneline</span> <span class=\"token parameter variable\">--author</span><span class=\"token operator\">=</span><span class=\"token string\">'chenxulin'</span> 指令\r\n终端上的输出如下：\r\n841458c <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> upload, upload/upload<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">test</span> src/test3.txt\r\n<span class=\"token number\">7914301</span> <span class=\"token punctuation\">(</span>upload/master, origin/master, origin/HEAD, master<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">test</span> <span class=\"token function\">add</span> directory\r\n75e78e8 first commit\r\n\r\n当然不同的提交记录有不同的输出，这里只是举例用。</code></pre></div>\n</li>\n<li>\n<p>查找某一时间段的commit记录</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 找出今天从上午9点到上午12点之间所有人的commit\r\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span> <span class=\"token parameter variable\">--since</span><span class=\"token operator\">=</span><span class=\"token string\">'9am'</span> <span class=\"token parameter variable\">--until</span><span class=\"token operator\">=</span><span class=\"token string\">'12am'</span>\r\n// 找出从2021年后，每天上午9点到上午12点之间所有人的commit\r\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span> <span class=\"token parameter variable\">--since</span><span class=\"token operator\">=</span><span class=\"token string\">'9am'</span> <span class=\"token parameter variable\">--until</span><span class=\"token operator\">=</span><span class=\"token string\">'12am'</span> <span class=\"token parameter variable\">--after</span><span class=\"token operator\">=</span><span class=\"token string\">'2021'</span>\r\n\r\n例如：作者在终端上输入\r\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span> <span class=\"token parameter variable\">--since</span><span class=\"token operator\">=</span><span class=\"token string\">'13pm'</span> <span class=\"token parameter variable\">--until</span><span class=\"token operator\">=</span><span class=\"token string\">'20pm'</span> <span class=\"token parameter variable\">--after</span><span class=\"token operator\">=</span><span class=\"token string\">'2023'</span>\r\n终端上会显示：\r\n<span class=\"token number\">7914301</span> <span class=\"token punctuation\">(</span>upload/master, origin/master, origin/HEAD, master<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">test</span> <span class=\"token function\">add</span> directory\r\n75e78e8 first commit</code></pre></div>\n</li>\n<li>\n<p>查询某个具体文件的commit记录</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> log 文件名.后缀名     // 查看此文件的commit记录\r\n<span class=\"token function\">git</span> log <span class=\"token parameter variable\">-p</span> 文件名.后缀名  // 查看此文件每次commit做了什么改动</code></pre></div>\n<h6>查询某行代码是谁写的</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> blame 文件名.后缀名         // 找出此文件的每一行代码是谁写的\r\n<span class=\"token function\">git</span> blame <span class=\"token parameter variable\">-L</span> A,B 文件名.后缀名  // 找出此文件第A行到第B行的代码是谁写的</code></pre></div>\n<h6>修改commit记录的注释</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 将最近的一次commit的注释用新的注释进行覆盖\r\n<span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'新的注释'</span></code></pre></div>\n<h6>追加文件到最近一次commit中</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 先用 <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>flie<span class=\"token operator\">></span>将其加入暂存区\r\n// 将<span class=\"token operator\">&lt;</span>file<span class=\"token operator\">></span>追加到最近一次commit中，且不改变其已提交的注释\r\n   <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span> --no-edit \r\n注：像这样改动commit内容的操作，尽量不要用在已经push出去的commit上</code></pre></div>\n<h6>擦除掉某条commit记录</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> reset xxx // 前往指定标识的commit\r\n// 例如前往标识为85e7e30的commit\r\n<span class=\"token function\">git</span> reset 85e7e30\r\n// 前往master/HEAD/标识符的第前N次commit\r\n<span class=\"token function\">git</span> reset master^\r\n<span class=\"token function\">git</span> reset master^^\r\n<span class=\"token function\">git</span> reset master~3\r\n<span class=\"token function\">git</span> reset HEAD^\r\n<span class=\"token function\">git</span> reset e12d8ef^\r\n// 参数： --mixed, --soft, <span class=\"token parameter variable\">--hard</span>\r\n<span class=\"token parameter variable\">--mixed</span> commit拆出来的文件留在工作目录，不放回暂存区\r\n<span class=\"token parameter variable\">--soft</span>  commit拆出来的文件留在工作目录，放回暂存区\r\n<span class=\"token parameter variable\">--hard</span>  commit拆出来的文件,工作目录和暂存区都删除\r\n例：git reset 85e7e30 <span class=\"token parameter variable\">--hard</span>\r\n\r\n// 查看引用日志reflog\r\n<span class=\"token function\">git</span> reflog  // 可以查到那些reset后消失的commit的标识\r\n\r\n// 用git revert指令来删除最后一次提交\r\n<span class=\"token function\">git</span> revert HEAD --no-edit   // 增加一次commit，这次commit的作用是删除上一次commit。\r\n注：这样做的好处是可以保留所有的commit记录，即上一次commit记录还在，只是上一次commit的内容被取消了，坏处是会增加一次commit记录，是commit记录变多，维护起来变得冗长。</code></pre></div>\n<h2>多分支协作开发</h2>\n<p>在实际项目的开发过程中，个人的力量总是有限的，一个大型的项目往往需要多位开发者协作完成，为了使得每位开发者提交代码的过程不至于相互发生冲突而产生混乱，每一位开发者都会在属于自己的分支上进行开发，最后把各自开发的结果合并起来，这就是多分支协作开发。</p>\n<h6>当前所在分支</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> branch  // 输出当前在这个项目中有哪些分支\r\n\r\nGit会默认设置一个名为master的分支，用*表示当前正在哪个分支上</code></pre></div>\n<h6>更改分支名称</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> 原分支名 新分支名\r\n\r\n// 例如更改empire分支的名称改为paper-tiger\r\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> empire paper-tiger</code></pre></div>\n<h6>新建分支</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> branch 分支名  \r\n\r\n// 例如:新建一个名为cat的分支\r\n<span class=\"token function\">git</span> branch <span class=\"token function\">cat</span> </code></pre></div>\n<h6>分支切换</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> checkout 分支名\r\n\r\n// 切换当前分支到cat分支上\r\n<span class=\"token function\">git</span> checkout <span class=\"token function\">cat</span>\r\n\r\n注：已经改动但未commit，切换分支后，也能将改动直接提交到新分支上。</code></pre></div>\n<h6>删除分支</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> 分支名\r\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> 分支名\r\n\r\n// 例如：删除名叫cat的分支\r\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token function\">cat</span>\r\n// 若cat分支上有内容还未合并，-d参数无法将分支删除，改用-D参数即可将其强制删除\r\n<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> <span class=\"token function\">cat</span>\r\n\r\n注：没有什么分支是不能删除的，包括默认的master分支也是能删除的（master分支只是默认的分支，没有其他特别之处）。\r\n注: 当前在分支A上，不能删除分支A，必须先切换到分支B上，才能对A分支进行删除操作。</code></pre></div>\n<h6>合并分支</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> checkout 分支名   // 切换到目标分支\r\n<span class=\"token function\">git</span> merge 分支名      // 把分支名代表的分支合并到当前分支上\r\n<span class=\"token function\">git</span> merge 分支名 --no-ff // 额外多出一个commit记录这次合并结果\r\n\r\n// 把cat分支合并到master分支上\r\n<span class=\"token function\">git</span> checkout master  // 先把分支切换回master分支\r\n<span class=\"token function\">git</span> merge <span class=\"token function\">cat</span>        // 把cat分支合并到master分支上</code></pre></div>\n<h6>另一种合并分支的方法</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// 以给定的分支为基准，将当前分支合并到指定分支上\r\n<span class=\"token function\">git</span> rebase 分支名\r\n\r\n// 例：当前在cat分支上，将cat分支合并到dog分支上\r\n<span class=\"token function\">git</span> rebase dog\r\n\r\n注：使用rebase的好处是不想merge合并那样会产生额外合并专用的commit，坏处是rebase合并不如merge合并直观。\r\n注：对于还未push出去的commit，可以使用rebase分支来整理commit。但对于公共commit，尽量不要使用rebase合并。\r\n\r\n思考一下：\r\n\t<span class=\"token number\">1</span>.除此之外，rebase合并和merge合并的区别在哪里?\r\n\t<span class=\"token number\">2</span>.如何取消merge合并和rebase合并。</code></pre></div>\n<h6>挽救分支</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">挽救未合并的分支的具体方法以下面的操作为例：\r\n\t假设cat有两个commit还未提交\r\n\t// 强行删除未合并的分支cat，删除后得到一个标识号b174a5a\r\n\t<span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-D</span> <span class=\"token function\">cat</span>  // 会得到一个cat当前指向的commit的标识号b174a5a\r\n\t// 找回这个commit，新建一个分支指向这个标识号b174a5a\r\n\t<span class=\"token function\">git</span> branch new_cat b174a5a\r\n\t这样就找回了刚刚未合并的分支\r\n\t\r\n注：如果刚刚删除的分支指向的commit的标识号忘记了，则用git reflog指令找回，reflog默认会保留30天。</code></pre></div>\n<h6>回到过去</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">回到过去的某个commit，从那个commit处新建一个分支\r\n<span class=\"token function\">git</span> branch 分支名 标识号\r\n\r\n例如，在commit标识号为657fce7的commit处开一个名为bird的分支\r\n<span class=\"token function\">git</span> branch bird 657fce7\r\n<span class=\"token function\">git</span> checkout bird   // 切换到刚刚创建的分支bird上</code></pre></div>\n<h2>标签</h2>\n<h6>轻量标签(lightweight tag)</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> tag 标签名 commit标识号\r\n\r\n// 给标识号为51d54ff的commit添加一个名为big_cat的轻量标签\r\n<span class=\"token function\">git</span> tag big_cat 51d54ff\r\n\r\n// 注：如果只使用git tag 标签名 ，但未指定commit标识号，则将会把标签贴在当前所在的commit上</code></pre></div>\n<h6>有附注的标签(annotated tag)</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">// -a参数就是指的是创建有附注的标签， -m指的是需要在后面添加注释\r\n<span class=\"token function\">git</span> tag 标签名 commit标识号 <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"注释\"</span>\r\n\r\n// 例如：给标识号为51d54ff的commit添加一个名为big_cat的带附注的标签\r\n<span class=\"token function\">git</span> tag big_cat 51d54ff <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'Big Cats are comming!'</span>\r\n\r\n注：有附注的标签主要用作软件版本号，轻量标签则是用于个人使用或者简单标记\r\n注：有附注标签的好处是可以知道更多关于这张标签的信息，而轻量标签的信息量较少。</code></pre></div>\n<h6>查看标签的信息</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> show 标签名   // 查看标签信息\r\n\r\n// 例如查看big_cat标签的信息\r\n<span class=\"token function\">git</span> show big_cat\r\n\r\n注：轻量标签只有标签指向的那个commit的信息，有附注的标签多了一些信息，包括谁在什么时候贴了这张标签等。</code></pre></div>\n<h6>删除标签</h6>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">不管哪一种标签，其本质都像是一张贴纸，撕掉一张贴纸并不会造成commit或文档不见，只是把这张贴纸撕掉而已。\r\n\r\n<span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-d</span> 标签名\r\n\r\n// 例如：删除名为big_cat的标签\r\n<span class=\"token function\">git</span> tag <span class=\"token parameter variable\">-d</span> big_cat</code></pre></div>\n<hr>\n<p>Git基本用法结束，进阶用法请自学！</p>","frontmatter":{"title":"How to use Git","date":"December 28, 2024","description":"Git 是一款十分好用的分布式版本控制工具，作为一名开发者，无论你喜不喜欢它，你都不能离开它，也不能不学习它。"}},"previous":{"fields":{"slug":"/typora/Typora active/"},"frontmatter":{"title":"How to active typora"}},"next":{"fields":{"slug":"/Some useful tools/utools/"},"frontmatter":{"title":"Some useful tools"}}},"pageContext":{"id":"3dc6140a-076f-536b-9209-f31ac0fe20e7","previousPostId":"a9a6b665-7255-5929-bd0f-c03a8e822e31","nextPostId":"05a3e9ec-a481-5909-96d6-9498e88bf128"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}