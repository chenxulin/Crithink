{"componentChunkName":"component---src-templates-blog-post-js","path":"/How to use Git/Git/","result":{"data":{"site":{"siteMetadata":{"title":"Crithinking"}},"markdownRemark":{"id":"3dc6140a-076f-536b-9209-f31ac0fe20e7","excerpt":"Git 是一款十分好用的分布式版本控制工具，作为一名开发者，无论你喜不喜欢它，你都不能离开它，也不能不学习它。 Git 本章节介绍Git的基本知识、Git下载安装、环境配置。 首先需要指明的是，GitHub不等于Git。GitHub是一个拥有很多仓库的在线网站，它的本体是一个Git服务器，这个Git…","html":"<p>Git 是一款十分好用的分布式版本控制工具，作为一名开发者，无论你喜不喜欢它，你都不能离开它，也不能不学习它。</p>\n<h2>Git</h2>\n<p>本章节介绍Git的基本知识、Git下载安装、环境配置。</p>\n<blockquote>\n<p>首先需要指明的是，<strong>GitHub不等于Git</strong>。GitHub是一个拥有很多仓库的在线网站，它的本体是一个Git服务器，这个Git服务器上存放着开发者们开发的各种项目。开发者们可以通过版本控制工具（如Git、SVN等）来使用GitHub上的各种项目。Git是一款分布式版本控制工具，我们可以使用Git来对项目进行管理，也可以通过它来使用GitHub上的各种项目。</p>\n</blockquote>\n<h4>Git基本知识</h4>\n<h4>Git下载安装</h4>\n<h4>Git环境配置</h4>\n<h2>从零开始使用Git</h2>\n<p>Git下载、安装、环境配置完成后，本章节介绍GitHub的使用、Git仓库的建立、 Git管理文件。</p>\n<h4>GitHub的使用</h4>\n<p>GitHub有两种常用的使用场景，一是从GitHub上下载项目到本地（以便于自己学习该项目或者在该项目的基础上做二次开发），二是把本地项目上传到GitHub（如果你没有自己的Git服务器的话）。本节先介绍<strong>如何从GitHub上下载项目</strong>，再介绍<strong>如何把本地项目上传到GitHub</strong>。</p>\n<ul>\n<li>\n<p>如何从GitHub上下载项目</p>\n</li>\n<li>\n<p>如何把本地项目上传到GitHub</p>\n</li>\n</ul>\n<h4>Git仓库的建立</h4>\n<h4>Git管理文件</h4>\n<h2>多分支协作开发</h2>\n<p>在实际项目的开发过程中，个人的力量总是有限的，一个大型的项目往往需要多位开发者协作完成，为了使得每位开发者提交代码的过程不至于相互发生冲突而产生混乱，每一位开发者都会在属于自己的分支上进行开发，最后把各自开发的结果合并起来，这就是多分支协作开发。本章节介绍多分支协作开发。</p>\n<h2>GitHub的使用</h2>\n<p>本章节介绍GitHub的使用。</p>\n<h2>拾遗</h2>\n<p>本章节介绍一些即使不懂也不影响使用的知识点。</p>","frontmatter":{"title":"How to use Git","date":"December 28, 2024","description":"Git 是一款十分好用的分布式版本控制工具，作为一名开发者，无论你喜不喜欢它，你都不能离开它，也不能不学习它。"}},"previous":{"fields":{"slug":"/typora/Typora active/"},"frontmatter":{"title":"How to active typora"}},"next":null},"pageContext":{"id":"3dc6140a-076f-536b-9209-f31ac0fe20e7","previousPostId":"a9a6b665-7255-5929-bd0f-c03a8e822e31","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}